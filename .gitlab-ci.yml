stages:
  - setup
  - lint
  - test
  - security

cache:
  paths:
    - .venv/
    - .cache/pip/
  key: ${CI_PROJECT_ID}-${CI_COMMIT_REF_SLUG}

variables:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "2.1.2"
  DJANGO_SETTINGS_MODULE: "plov.settings"
  PIP_NO_CACHE_DIR: "false"
  PYTHONUNBUFFERED: "1"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 1. DEPENDENCY INSTALLATION (runs once)
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
install-dependencies:
  stage: setup
  image: python:${PYTHON_VERSION}
  script:
    - python -V
    - pip install poetry==${POETRY_VERSION}
    - poetry config virtualenvs.in-project true
    - poetry install --no-root
  artifacts:
    paths:
      - .venv/
    expire_in: 1 hour
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 2. LINTING STAGE
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
flake8:
  stage: lint
  image: python:${PYTHON_VERSION}
  needs: ["install-dependencies"]
  script:
    - source .venv/bin/activate
    - poetry run flake8 .
  cache:
    paths:
      - .venv/
    policy: pull

black:
  stage: lint
  image: python:${PYTHON_VERSION}
  needs: ["install-dependencies"]
  script:
    - source .venv/bin/activate
    - poetry run black --check .
  cache:
    paths:
      - .venv/
    policy: pull

mypy:
  stage: lint
  image: python:${PYTHON_VERSION}
  needs: ["install-dependencies"]
  script:
    - source .venv/bin/activate
    - poetry run mypy .
  cache:
    paths:
      - .venv/
    policy: pull

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 3. TESTING STAGE
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
run-tests:
  stage: test
  image: python:${PYTHON_VERSION}
  needs: ["install-dependencies"]
  script:
    - source .venv/bin/activate
    - poetry run pytest plov/
  cache:
    paths:
      - .venv/
    policy: pull

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 4. SECURITY STAGE (non-blocking)
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
bandit-scan:
  stage: security
  image: python:${PYTHON_VERSION}
  needs: ["install-dependencies"]
  script:
    - source .venv/bin/activate
    - poetry run bandit -r plov/
  allow_failure: true
  cache:
    paths:
      - .venv/
    policy: pull
