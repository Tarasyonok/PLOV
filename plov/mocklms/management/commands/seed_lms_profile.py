import django.core.management.base
import django.utils.timezone
import faker

import mocklms.models


class Command(django.core.management.base.BaseCommand):
    help = '–°–æ–∑–¥–∞—ë—Ç —Ñ–µ–π–∫–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞ –≤ LMS'
    fake = faker.Faker('ru_RU')

    def handle(self, *args, **options):

        self.stdout.write(self.style.HTTP_INFO('\nüöÄ –°–æ–∑–¥–∞—é –ø—Ä–æ—Ñ–∏–ª—å (–Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)'))

        profile = self.create_profile()
        course = self.create_course(profile)
        self.create_teachers(course)

        self.stdout.write(
            self.style.SUCCESS(f'‚úÖ –°–æ–∑–¥–∞–ª –ø—Ä–æ—Ñ–∏–ª—å: {profile.display_name} (ID: {profile.lms_profile_id})'),
        )

    def create_profile(self):
        lms_profile_id = input('ID –ø—Ä–æ—Ñ–∏–ª—è (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä): ') or self.fake.pyint(100000, 999999)
        username = input('–õ–æ–≥–∏–Ω: ') or self.fake.user_name()
        gender = input('–ü–æ–ª (0 - –º—É–∂—Å–∫–æ–π | 1 - –∂–µ–Ω—Å–∫–∏–π): ') or self.fake.pybool()
        last_name = input('–§–∞–º–∏–ª–∏—è: ') or [self.fake.last_name_male(), self.fake.last_name_female()][gender]
        first_name = input('–ò–º—è: ') or [self.fake.first_name_male(), self.fake.first_name_female()][gender]
        middle_name = input('–û—Ç—á–µ—Å—Ç–≤–æ: ') or [self.fake.middle_name_male(), self.fake.middle_name_female()][gender]
        email = input('Email: ') or self.fake.email()
        phone = input('–¢–µ–ª–µ—Ñ–æ–Ω (+7XXXXXXXXXX): ') or f'+79{self.fake.msisdn()[:9]}'
        birth_date = input('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î): ') or self.fake.date_of_birth(
            minimum_age=12,
            maximum_age=18,
        ).strftime('%Y-%m-%d')

        return mocklms.models.LMSProfile.objects.create(
            lms_profile_id=lms_profile_id,
            uid=self.fake.pyint(1000000000, 9999999999),
            username=username,
            last_name=last_name,
            first_name=first_name,
            middle_name=middle_name,
            gender=list(mocklms.models.LMSProfile.GenderChoices)[gender],
            display_name=f'{last_name} {first_name}',
            avatar='avatar_mock.jpg',
            email=email,
            phone=phone,
            birth_date=birth_date,
            city=self.fake.city_name(),
            school='–®–∫–æ–ª–∞ ' + self.fake.company(),
            school_class=f'{self.fake.pyint(5, 11)} –∫–ª–∞—Å—Å',
        )

    def create_course(self, profile):
        title = 'Django | –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ø–Ω–¥–µ–∫—Å –õ–∏—Ü–µ—è | ' + input('–ü–æ—Ç–æ–∫ (–ø—Ä–∏–º–µ—Ä: –í–µ—Å–Ω–∞ 24/25): ') or '–í–µ—Å–Ω–∞ 24/25'
        rating = int(input('–†–µ–π—Ç–∏–Ω–≥: ') or self.fake.pyint(50, 150))
        has_certificate = self.fake.pybool()
        if has_certificate:
            certificate_id = self.fake.pyint(10000, 99999)
            certificate_number = self.fake.pyint(1000000000, 9999999999)
        else:
            certificate_id = None
            certificate_number = None

        course = mocklms.models.LMSCourse.objects.create(
            profile=profile,
            title=title,
            rating=rating,
            status=['enrolled', 'graduated'][self.fake.pyint(0, 1)],
            certificate_id=certificate_id,
            certificate_number=certificate_number,
            accessibility_status='active',
        )

        mocklms.models.LMSGroup.objects.create(
            course=course,
            name=f'–ì—Ä—É–ø–ø–∞ –¥–ª—è {course.title}',
            status=course.status,
        )

        return course

    def create_teachers(self, course):
        if not mocklms.models.LMSTeacher.objects.filter(display_name='–ï—Ä—ë–º–∏–Ω –î–∞–Ω–∏–ª–∞').exists():
            mocklms.models.LMSTeacher.objects.create(
                course=course,
                display_name='–ï—Ä—ë–º–∏–Ω –î–∞–Ω–∏–ª–∞',
                avatar='danila_avatar.jpg',
            )

        if not mocklms.models.LMSTeacher.objects.filter(display_name='–ö–∞—à–∏–Ω –ü–∞–≤–µ–ª').exists():
            mocklms.models.LMSTeacher.objects.create(
                course=course,
                display_name='–ö–∞—à–∏–Ω –ü–∞–≤–µ–ª',
                avatar='raccoon_avatar.jpg',
            )
